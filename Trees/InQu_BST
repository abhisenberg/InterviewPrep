****Transform a BST to greater sum tree: Given a BST, transform it into greater sum 	tree where each node contains sum of all nodes greater than that node.
	-> Recur the tree in reverse inorder fashion, means right -> root -> left
		bcz the right node is > than the root, and while backtracking, keep
		adding the value of the right node to "sum" and add it to the current node.
		
	-> the recursion will look like
		func(Node root, int* sum){
			..
			func(root.right, sum)
			
			root.data = *sum;
			*sum += root.data
			
			func(root.left, sum)
			
			..
		}


****Check if a tree is BST: Given a binary tree, return true if it is BST, else false.
	-> Keep track of MIN and MAX element found till now in the tree, while going LEFT : change only MAX = Current node value. While going RIGHT : change only MIN = Current node value.

	-> Recursion will look like
		boolean check(Node node, int max, int min){
	        if(node == null){
	            return true;
	        }
	        
	        if(node.left != null){
	            if(node.left.data > node.data
	                || node.left.data < min){
	                return false;
	            }
	            
	            if(!check(node.left, node.data, min))
	                return false;
	        }
	        
	        if(node.right != null){
	            if(node.right.data < node.data
	                || node.right.data > max){
	                return false;
	            }
	            
	            if(!check(node.right, min, node.data))
	                return false;
	        }
	        
	        return true;
    	}

****Check root-to-leaf path sum: check whether there is a root to leaf path in that tree with a given sum.
	-> Keep a track of the path sum by supplying a sum variable
	and check for leaf in the way: if(node.left== null && node.right == null). If true, compare target and current sum, if equal, return true else false;

	-> Recursion will be like
	 boolean func(Node node, int target, int sum){
        if(node == null){
            return false;
        }
    
        sum += node.data;
        
        if(node.left == null && node.right == null){
            if(sum == target){
                return true;
            }
            return false;
        }
        
        return func(node.left, target, sum)
            || func(node.right, target, sum);
    }


****LCA of a BST: Given two numbers n1 and n2, find their lca if it is guarabteed that they exist in bst

	-> If both n1 and n2 are smaller than root data, then search for lca in left node. If both are greater than search in right node. Else return the current node, bcz it means that one is in left side and the other is in right side, hence the current node is lca.

	Node lca(Node node, int n1, int n2) 
    {
        if(node == null) return null;
        
        if(n1 < node.data && n2 < node.data)
            return lca(node.left, n1, n2);
        
        if(n1 > node.data && n2 > node.data)
            return lca(node.right, n1, n2);
            
        return node;
    }