***Find if there is a subarray with 0 sum: Given an array of positive and negative numbers,
find if there is a subarray (of size at-least one) with 0 sum.

	Input: {4, 2, -3, 1, 6}
	Output: true 
	There is a subarray with zero sum from index 1 to 3.
	
	-> FInd the prefix sum of the array, if the prefix sum repeats at any point,
	then it means that there exists a subarray between those pts with 0 sum.
	ex- 
			arr[] = {1, 4, -2, -2, 5, -4, 3}

		If we consider all prefix sums, we can
		notice that there is a subarray with 0
		sum when :
		1) Either a prefix sum repeats or
		2) Or prefix sum becomes 0.

		Prefix sums for above array are:
		1, 5, 3, 1, 6, 2, 5

		Since prefix sum 1 repeats, we have a subarray
		with 0 sum. 
		


***Return n'th node from end of linked list:

	-> Use two pointers. Both pointers are initialized to head.
	First pointers moves forwards till the count becomes n from the front.
	Then the other pointer and the first pointer start moving simultaneously.
	This keeps on going till the first pointer becomes null. At this point the
	second pointer will be at the desired node.



***Get the intersection point of two Linked Lists.
There are two singly linked lists in a system. By some programming error,
the end node of one of the linked list got linked to the second list,
forming a Y shaped list. Write a program to get the point where two linked list merge.

	Given LL is like this: 3 -- 6 -- 9 -- 15 -- 30
							  10 -- 11 -- /
			Here the intersection is 15.

		-> 
		1) Get count of the nodes in the first list, let count be c1.
		2) Get count of the nodes in the second list, let count be c2.
		3) Get the difference of counts d = abs(c1 – c2)
		4) Now traverse the bigger list from the first node till d nodes
		so that from here onwards both the lists have equal no of nodes.
		5) Then we can traverse both the lists in parallel till we come
		across a common node.
		(Note that getting a common node is done by comparing the address of the nodes)		



***Detect and remove loop in a LL:
checks whether a given Linked List contains loop and if loop is present then removes the loop and returns true.
	Input: 1--2--3
			  |  |
		      5--4

	Output: 1--2--3--4--5

	    ->
		1) Detect Loop using Floyd’s Cycle detection algo and get the pointer to a loop node.
		2) Count the number of nodes in loop. Let the count be k.
		3) Fix one pointer to the head and another to kth node from head.
		4) Move both pointers at the same pace, they will meet at loop starting node.
		5) Get pointer to the last node of loop and make next of it as NULL.

***Count inversions in array:
Use merge sort and keep a variable 'inv_cnt' that will store the value of numbers that need to be swapped. 
This is done in the 'mergeTwoSortedArrays()' where we merge the 2 sorted arrays.
Suppose 'i' is the counter for left array and 'j' is the counter for right array,
then if arr[i] > arr[j], then all the further elements in left side upto 'mid' are > arr[j],
hence they all need to be swapped. Therefore, when we encounter arr[i] > arr[j], increment inv_cnt by (mid - i);

Pseudo code is as follows:
	
	ms_invcnt(arr[], int left, int right){
		mid = (left+right)/2

		int left_inv = ms_invcnt(arr left half)
		int right_inv = ms_invcnt(arr right half)
-		int combined = mergeSorted_invcnt(arr,left, mid, right)
		return left_inv + right_inv + combined
	}

	mergeSorted_invcnt(arr[], int left, int mid, int right){
		...
		int i = left, j = mid+1
		int inv_cnt = 0

		while( (i<=mid) && (j<right) ){
			if(arr[i] > arr[j]){
				...
				inv_cnt += (mid - i);
				...
			}
		}
		...
	}

***Kadanes algo: Given an array containing both negative and positive integers.
Find the contiguous sub-array with maximum sum.

	int maxSubArraySum(int a[], int size)
	{
	   int max_so_far = a[0];
	   int curr_max = a[0];
	 
	   for (int i = 1; i < size; i++)
	   {
	        curr_max = max(a[i], curr_max+a[i]);
	        max_so_far = max(max_so_far, curr_max);
	   }
	   return max_so_far;
	}

***Sort an array of 0s, 1s, 2s
	Take three pointers: z (denotes the position of zero),
	i (current element), t (denotes the position of two)

	z = 0, i = 0, t = arr.length-1
	while(i <= t){
		if (arr[i] == 0){
			swap(arr[i], arr[z])
			i++
			z++
		}
		else if (arr[i] == 1){
			i++
		}
		else {
			swap(arr[i], arr[t])
			t--
		}
	}

***Find max j-i where arr[j] > arr[i]
	We construct two auxiliary arrays LMin[] and RMax[] such that LMin[i]
	holds the smallest element on left side of arr[i] including arr[i],
	and RMax[j] holds the greatest element on right side of arr[j]
	including arr[j]. After constructing these two auxiliary arrays,
	we traverse both of these arrays from left to right. While traversing
	LMin[] and RMa[] if we see that LMin[i] is greater than RMax[j],
	then we must move ahead in LMin[] (or do i++) because all elements
	on left of LMin[i] are greater than or equal to LMin[i].
	Otherwise we must move ahead in RMax[j] to look for a greater
	j – i value.

	After constructing both the arrays, traversing both:

	i = 0, j = 0
	while (j < n && i < n) 
        {
            if (LMin[i] < RMax[j]) 
            {
                maxDiff = max(maxDiff, j - i);
                j = j + 1;
            } 
            else
                i = i + 1;
        }
 
    return maxDiff;


***Maximum difference between two elements such that larger element
appears after the smaller number

	In this method, instead of taking difference of the picked element
	with every other element, we take the difference with the minimum
	element found so far. So we need to keep track of 2 things:
	1) Maximum difference found so far (max_diff).
	2) Minimum number visited so far (min_element).

		for (i = 1; i < arr_size; i++) 
        {
            if (arr[i] - min_element > max_diff)	
                max_diff = arr[i] - min_element;
            if (arr[i] < min_element)
                min_element = arr[i];
        }
        return max_diff;

***Stock buy sell to max profit
	1. Find the local minima and store it as starting index. If not exists,
	return.
	2. Find the local maxima. and store it as ending index. If we reach the
	end, set the end as ending index.
	3. Update the solution (Increment count of buy sell pairs)
	4. Repeat the above steps if end is not reached.

	// Traverse through given price array
    int i = 0;
    while (i < n-1)
    {
        // Find Local Minima. Note that the limit is (n-2) as we are
        // comparing present element to the next element. 
        while ((i < n-1) && (price[i+1] <= price[i]))
            i++;
 
        // If we reached the end, break as no further solution possible
        if (i == n-1)
            break;
 
        // Store the index of minima
        sol[count].buy = i++;
 
        // Find Local Maxima.  Note that the limit is (n-1) as we are
        // comparing to previous element
        while ((i < n) && (price[i] >= price[i-1]))
            i++;
 
        // Store the index of maxima
        sol[count].sell = i-1;
 
        // Increment count of buy/sell pairs
        count++;
    }


***Minimum number of platforms needed: Given arrival and departure times of
all trains that reach a railway station, find the minimum number of
platforms required for the railway station so that no train waits.
We are given two arrays which represent arrival and departure times
of trains that stop.

	Examples:

	Input:  arr[]  = {9:00,  9:40, 9:50,  11:00, 15:00, 18:00}
	        dep[]  = {9:10, 12:00, 11:20, 11:30, 19:00, 20:00}
	Output: 3
	There are at-most three trains at a time (time between 11:00 to 11:20) 

	Solution:

		arr[]  = {9:00,  9:40, 9:50,  11:00, 15:00, 18:00}
	    dep[]  = {9:10, 12:00, 11:20, 11:30, 19:00, 20:00}

		All events sorted by time.
		Total platforms at any time can be obtained by subtracting total 
		departures from total arrivals by that time.
		 Time     Event Type     Total Platforms Needed at this Time                               
		 9:00       Arrival                  1
		 9:10       Departure                0
		 9:40       Arrival                  1
		 9:50       Arrival                  2
		 11:00      Arrival                  3 
		 11:20      Departure                2
		 11:30      Departure                1
		 12:00      Departure                0
		 15:00      Arrival                  1
		 18:00      Arrival                  2 
		 19:00      Departure                1
		 20:00      Departure                0

		Minimum Platforms needed on railway station = Maximum platforms 
		                                              needed at any time 
		                                           = 3  

***Given an array of integers, write a function that returns true if
there is a triplet (a, b, c) that satisfies a2 + b2 = c2, in O(n^2)

	-> The naive approach is to run 3 loops, for a, b and c. O(n^3)
	-> Better solution is to first sort the array, then square all the terms
	Now in this array, run the loop backwards, and check for any two numbers
	in the interval index (0, c-1) and check if it satisfies the condition.

	for(int c = n-1; c>=0; c--){
		int a = 0, b = c-1;
		
		while(a < b){
			if(a + b < c){
				a++;
			}
			else if(a + b > c){
				b--;
			}
			else {
				found a, b and c
			}
		}
	}

***Sliding Window Maximum: Given an array and an integer k, find the maximum
for each and every contiguous subarray of size k.

	Input:
	2
	9 3
	1 2 3 1 4 5 2 3 6
	10 4
	8 5 10 7 9 4 15 12 90 13

	Output:
	3 3 4 5 5 5 6
	10 10 10 15 15 90 90
	
	O(n) time and O(k) space
	
	-> A Deque is used to solve this, deque is used bcz of it's ability
	to perform operations on both ends of the list (will refer to the deque as list).
	At any point of time, the list will be of size k or less.
	
	Quick rules:
	-> The list will contain indices of the array elements, not the elements
	  (bcz indices will be needed when we want to remove the out-of-the-window elements.)
	-> Only those indices will be kept in the list which are present in the current window.
	-> At all times, the elements corresponding to the indices in the list will be in decreasing order. ie.
	  The indices as well as the values will be in decreasing order.
	-> Hence the first element of the list is always be the max of the window.
	-> The algo is designed in such a way that, the incoming new element either becomes the last (by
	  removing the prev. elemtns smaller that it) or the first element in the list.
	
	The The algo is given below:
	
		/*
		For first window, the loop will run from 0 -> (k-1). 
		*/
		for(int i=0; i<k; i++){
		   1. Remove all the indices 'j's starting from back end of the list,
		     for which arr[j] < arr[i]
		   2. Add index 'i' to the back end of the list.
		}

		/*
		For subsequenet windows
		*/
		for(int i=k; i<n; i++){
		   1. Print the first element from the list, which is the max of the prev window.
		   2. Remove all indices from the front end of the list which are now out-of-window
		     for this new current window.
		   3. Remove all the indices 'j's starting from back end of the list,
		     for which arr[j] < arr[i]
		   4. Add index 'i' to the back end of the list.
		}
	
	
	Code:
	  	  
		    Deque<Integer> list = new LinkedList<>();		    
		    
		    //For the first window
		    for(int i=0; i<k; i++){
		        while(!list.isEmpty() && arr[list.peekLast()] < arr[i]){
		            list.pollLast();
		        }
		        list.addLast(i);
		    }
		    
		    //For rest of the windows
		    for(int i=k; i<n; i++){
		        p(arr[list.peekFirst()]+" ");
		        
		        while(!list.isEmpty() && list.peekFirst() < (i-k+1)){
		            list.pollFirst();
		        }
		        
		        while(!list.isEmpty() && arr[list.peekLast()] < arr[i]){
		            list.pollLast();
		        }
		        list.addLast(i);
		    }
		    
		    
		    po(arr[list.peekFirst()]+" ");
	
	
***Find majority element (Boyer Moore Voting Algo): Given an array A of N elements.
Find the majority element in the array. A majority element in an array A of size N is an
element that appears more than N/2 times.

	Input:
	2
	5
	3 1 3 3 2
	3
	1 2 3

	Output:
	3
	-1
	
	O(n) time and O(1) space
	
	->Boyer Moore Voting Algo: There are 2 steps to it
		~Find the probable element which is the most probable to be the majority element, in one iteration
		~Check if the candidate found in step 1 is actually majority element, by counting it explicity.
		 If the candidate if not maj. then no other can be, hence there will be no majority.

	Algo:
		/*
		Finding the candidate element in one iteration
		Take 2 variables, cand and count
		If count is 0, then consider the current element as candidate, and increment the count.
		If not, then if the current element is same as already selected candidate , then incremenet the count.
			else decrease the count. If it becomes  0, then the next element will be considered to be the 
			candidate.
		*/
		
		int cand, count = 0;
		for(int i=0; i<n; i++){
		    if(count == 0){
		        cand = arr[i];
			count++;
		    } else {
		    	if(cand == arr[i]) count++;
			else count--;
		    }
		}
		
		/*
		If the count is 0 after the above step then no element is majority.
		Check if the candidate element is actually majority element by explicit counting.
		*/
		int freq = 0;
		for(int i=0; i<n; i++){
		    if(arr[i] == cand) freq++;
		}
		if(freq > n/2) cand is majority
		else none is.
		
***Maximum tip calculator: Seems like DP at first look but it is greedy

Question : Rahul and Ankit are the only two waiters. Restaurant received N orders today.
	The amount of tips may differ when handled by different waiters, if Rahul takes the ith order, he would be tipped Ai rupees
	and if Ankit takes this order, the tip would be Bi rupees.
	In order to maximize the total tip value they decided to distribute the order among themselves.
	One order will be handled by one person only. Also, due to time constraints Rahul cannot take more than X orders
	and Ankit cannot take more than Y orders.
	It is guaranteed that X + Y is greater than or equal to N.
	Find out the maximum possible amount of total tip money after processing all the orders.
	
	Algo :
	1.    Sort the absolute difference of the value of Ai and Bi( |Ai-Bi|) in decreasing order.
	2.    Compare Ai and Bi value which one will be greater add that value to the sum.
	3.    Decrement from the total order taken by Rahul or Ankit in case of order taken from A or B row by the comparison made.
	4.    If i equals to n goto step 5 else goto step 2.
	5.    Return sum.
	
	Code:
	
	static class Pair implements Comparable<Pair>{
	    int a;
	    int b; 
	    
	    public Pair (int a, int b){
	        this.a = a;
	        this.b = b;
	    }
	    
	    public int compareTo(Pair other){
	        return -1*(Math.abs(this.a - this.b) - Math.abs(other.a - other.b));
	    }
	}
	
	function main(){
	..
	  	    Pair[] arr = new Pair[n];
		    for(int i=0; i<n; i++){
		        arr[i] = new Pair(a[i], b[i]);
		    }
		    
		    Arrays.sort(arr);
		    
		    int max = 0;
		    for(int i=0; i<n; i++){
		        
		        if(arr[i].a == arr[i].b){
		            if(x > y){
		                max += arr[i].a;
		                x--;
		            } else {
		                max += arr[i].b;
		                y--;
		            }
		        }
		        
		        else {
			    if (x > 0 && (arr[i].a > arr[i].b || y == 0)){
				max += arr[i].a;
				x--;***
			    }
			    else if (y > 0 && (arr[i].b > arr[i].a || x == 0)){
				max += arr[i].b;
				y--;
			    }
		        }
		    }
		    
		    po(max);
	..
	}
	

***Four Elements sum in array: Given an array of integers, find a combination of four elements in the
array whose sum is equal to a given value X.

	The naive solution is O(n^4), but we can do it in O(n^3)
	1) Sort the input array.
	2) Fix the first element as A[i] where i is from 0 to n–3. After fixing the first element of
	quadruple, fix the second element as A[j] where j varies from i+1 to n-2.
	Find remaining two elements in O(n) time, using the mthod of meet-in-the-middle.
	
 		    Arrays.sort(arr);
		    boolean ans = false;
		    for(int i=0; i<n-3; i++){
		        for(int j=i+1; j<n-2; j++){
		            int k = j+1, l =n-1;
		            while(k < l){
		                int csum = arr[i]+arr[j]+arr[k]+arr[l];
		                if(csum < target){
		                    k++;
		                } else if(csum > target){
		                    l--;
		                } else {
		                    ans = true;
		                    break;
		                }
		            }
		        }
		    }
		    if(ans) po(1);
		    else po(0);
		    		    
***Min. element in sorted circular array: A sorted array A[ ] with distinct elements is rotated at
some unknown point, the task is to find the minimum element in it.
	Input: 4 5 1 2 3
	Output: 1
	Time complexity: O(logn)
	
	-> There are 4 cases: 
	1. low == high : arr[low] is the required answer, since only this element is remaining in the range
	2. We find mid, next, prev
	   Only the minimum element has the property that next and prev is less than it.
	   Hence we check if the current ele (mid) is less than both the next and prev.
	   arr[mid] <= arr[prev] && arr[mid] <= arr[next]
	3. If the arr[mid] ele is not the minimum, then the min either lies on the right-subarray or the left subarray
	   To decide in which subarray it lies,
	   arr[mid] <= arr[high]: Then the min lies in left side, hence for further iterations: high = mid-1
	4. arr[mid] >= arr[low]: The min lies in the right side, for further iterations: low = mid+1
	
	Code:
	int func(int[] arr, int n){
	    int low = 0, high = n-1;
	    
	    while(low <= high){
	        
	        if(low == high)
	            return arr[low];
	        
	        int mid = (low+high)/2;
	        int next = (mid+1)%n;
	        int prev = (mid-1+n)%n;
	        
	        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev])
	            return arr[mid];
	        
	        else if(arr[mid] <= arr[high])
	            high = mid-1;
	            
	        else if(arr[mid] >= arr[low])
	            low = mid+1;
	    }
	
***Largest number formed from array of numbers: Given a list of non negative integers,
arrange them in such a manner that they form the largest number possible.

	Input:
	3 30 34 5 9
	54 546 548 60

	Output:
	9534330
	6054854654
	
	Since normal sorting of the numbers won't do the required job, we have to sort them in a specific way.
	
	Code:
	static class Max implements Comparator<String> {
	    public int compare(String x, String y){
	        String a = x+y;
	        String b = y+x;
	        return b.compareTo(a);
	    }
	}
	
